#include <iostream>       // std::cout
#include <atomic>         // std::atomic
#include <thread>         // std::thread
#include <vector>         // std::vector


const size_t arr_size = 40000000, nb_thread = 12, nb_run = 10;// this code will run 10 times
using namespace std;
void threadFn(int* array_start, int64_t* psum) {
    //array_start wher the loop should begin, psum (partial sum) where the thread stock the result
    for (size_t i = 0; i < arr_size / nb_thread; i++)
    {
        *psum += *(array_start + i);
    }
}
int main()
{
    int time[nb_run];
    int A = 0;
    do {
        int arr[arr_size]; 
        int64_t psum[nb_thread] = { 0 };
        for (int i = 0; i < arr_size; i++)
        {
            arr[i] = i + 1;
            // cout << arr[i] <<"\n"<< endl; // to print the array
        }
        std::vector<std::thread> threads;
        std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now(); //start time -chrono-
        // to creat threads automatically
        for (int i = 0; i < nb_thread; i++) {
            threads.push_back(std::thread(threadFn, arr + i * (arr_size / nb_thread), psum + i));
        }
        for (auto& th : threads) th.join();
        int64_t s = 0;
        for (int i = 0; i < nb_thread; i++) {
            s += psum[i];
            cout << psum[i] << "\n"; //to print the result of the sum of each threads
        }
        if (s == (arr_size * (arr_size + 1) / 2))cout << "it works\n"; //to verify the array size 
        std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();//end time -chrono-
        std::cout << "total sum: " << s << endl;
        std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[Âµs]" << "\n" << std::endl; //1       
        A = A + 1;
    } while (A < nb_run);
    
    return 0;
}
